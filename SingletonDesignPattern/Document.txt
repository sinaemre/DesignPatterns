Singleton Design Pattern

Yapı açısında singleton oldukça basittir. Bu, özel bir örnekleme ve bu örnekleme başvurmanın tek yolunu sağlaya genel bir statik yönteme sahip tek sınıftır. Ayrıca private bir constructor'a sahip olmalıdır. Çünkü nesnenin dışarıdan üzretilmemesi prensibine dayanmaktadır. Singleton deseninde esas amaç nesnenin her daim bir oluşturması ve bu örneklem üzerinden bütün işlemlerin yapılmasıdır. Biraz daha açarsak nesnenin kullanım süresi boyunca sadece bir kez oluşturulması ve bir daha oluşturulmaması üzerine kurulu bir mantığı bulunmaktadır. 

Performans nedeniyle singleton nesneler genellik bir şey onlara talep edinceye kadar oluşturulmazlar. Bu lazy initialization o olarak bilinir ve bu kalıbın çoğu uygulaması tarafından varsayılan davranıştır. Ancak, uygulamam başladığında ihtiyacımız olan örneği basitçe üretmek, oluşturmak ve ardından bu örneği uygulamanın ömrü boyunca kullanmakta mümkündür. Singleton sınıfları tek, özel, parametresiz bir constructor'a sagip olmalıdır. 

Singleton, nesnenin sadece bir kez üretilmesi için kullanılmaktaydı. Bunun yanında nesnenin kontrollü bir şekilde belirli bir şart veya şartlar doğrultusunda üretilmesini de temin etmektedir. Buradaki tanımdan şuraya gidebiliriz, başka bir mekanizmaya kontrollü bir şekilde geçmek istediğimizde singleton tercih edebiliriz. Bu kontrolü nasıl temin ettiğini düşünecek olursak singleton ile üretilmiş nesneler bir kez başlatıldığından ve tüm taleplerin ona uğrayacak olmasından dolayı isteklerin yönlendirilmesinde kullanılabilir. 

Singleton ile üretilmiş nesnelerin kendisine has karakteristik bir yaşam döngüsü bulunmaktadır. Bu yüzden önümüze gelen nesneleri singleton ile üretmemeliyiz. Singleton ile üretilen nesneler statik sınıflar gibi RAM üzerinde yaşam alanları biriciktir. RAM'in HEAP alanında yaşarlar lakin projenin koştuğu server reset edilinceye kadar yaşarlar. Bu durum memory maliyeti olarak bize geri döner. Örneğin yıl sonunda çalışacak bir servisi singleton ile üretmemeliyiz. Çünkü bu serviis sadece yıl sonunda bir kez kullanılacaktır. Bu senaryoda projenin canlıya alındığını ve yıl sonunda bu servise talep geldiği için singleton ile örneklemi oluşturulduğunuz düşünelim, bu nesne artık RAM'dan kaldırılmayacaktır taki server reset edilinceye kadar, diyelim ki reset edilmedi iligili örneklem business gereği bir daha bir sonraki yıl çalışacaktır. 

Singleton bir antipattern'dir. Bunun nedeni uyguladıkları bir arabirimi iletmek yerine kodda doğrudan statik bir sınıf kullandıklarından sınıflar arasında tight couple(sıkı bağ) ilişkiye sebebiyet verir. Private concstructor ve statik yapıları yüzünden bağımlılık enjeksiyonuna(DI-Dependency Injection) uygun değildirler. Ayrıca bu model takip eden sınıflar gerçek işlerinin yanı sıra örneklem yaşam sürelerini yönetmektende sorumlu olacağından endişelerin ayrılması prensibine (seperation of concerns) ve tek sorumluluk ilkesine(SRP - Single Responsibilty Principle) ters düşmektedir. Birden fazla singleton uygulayacaksınız, singleton davranışını zorlamak için gereken tüm mantığı çoğaltmamız gerekecek, bu aynı zamanda kendinizi tekrar etmemeniz(DRY - Dont Repeat Yourself) ilkesini ihlal ettiğiniz anlamına gelir.